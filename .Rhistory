outcome <- df %>% pull(!!dv)
#check normality
cat("\n")
message("--------------------------------------------------------------------------------------")
message("----------------------------------Test for Normality----------------------------------")
par(mfrow=c(1,2))
qqnorm(outcome)			#normal QQ plot (should be straight diagonal for normal)
hist(outcome,breaks=length(outcome))	#histogram
sh <- shapiro.test(outcome) %>% print()
ks.test(outcome, "pnorm", mean=mean(outcome), sd=sd(outcome)) %>% print()
if(sh$p.value < norm_test_threhold){
message("Normality satisfied according to Shapiro-Wilk")
} else {
message("Normality NOT satisfied according to Shapiro-Wilk")
}
#Don't worry about ties warning\n"
#
# test for homogeneity of variance.
# NOTE 1: bartlett test is only reliable for normal data.
# NOTE: this stupid function will crash and break R if there are unequal numbers of results in conditions
#bartlett.test(outcome ~ independentVariable1 , data=df)
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------Means and SDs------------------------------------")
# mean overall
cat("\n")
message("mean overall")
mean(outcome, na.rm = FALSE) %>% print()
# calculate means for condition cells (combinations of conditions)
cat("\n")
message("means of outcome by levels of independent variable")
tapply(outcome, iv_fac, mean)  %>% print()
# standard deviation overall
cat("\n")
message("SD overall")
sd(outcome, na.rm = FALSE) %>% print()
# calculate SD for condition cells (combinations of conditions)
cat("\n")
message("SDs of outcome by levels of independent variable")
tapply(outcome, iv_fac, sd)  %>% print()
# ANOVA. note: missing values omitted by default for ANOVA
cat("\n")
message("--------------------------------------------------------------------------------------")
message("-----------------------------------------ANOVA----------------------------------------")
aov.out <- aov(outcome ~ iv_fac, data=df)    #do the analysis of variance
tidy(aov.out) %>% print()
# aov.out  		   #SHOW ANOVA MODEL
# summary(aov.out)   #SHOW ANOVA summary table
# don't need to worry about SS types for one-way model
if(tidy(aov.out)$p.value[1] < 0.05){
cat("\n")
message("-----------Effect detected by ANOVA-----------")
} else{
cat("\n")
message("-----------No evidence for effect detected by ANOVA-----------")
}
pacman::p_load(tidyverse, RColorBrewer)
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75))
}
draw_boxplot <- function(df, var_x, var_y, title,
fill = "darkslategray3", lwd = 0.85, fatten = 1, outlier.size = 2, alpha = 0.9,
label_wrap = 17,
size_x = 20, size_y = 17, size_title = 18){
# browser()
var_x <- enquo(var_x)
var_y <- enquo(var_y)
df %>%
ggplot() +
geom_boxplot(aes_string(x = quo_name(var_x), y = quo_name(var_y)),
lwd = lwd, fatten = fatten, outlier.size = outlier.size, fill = fill, alpha = alpha) +
scale_x_discrete(labels = function(x) str_wrap(x, width = label_wrap)) +
labs(title = title) +
theme_pub(size_x, size_y, size_title) +
guides(fill=FALSE)
}
draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------pairwise tests------------------------------------")
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
message("paired t test")
pairwise.t.test(outcome, iv_fac, p.adj = "none", data=df) %>% print() #non-corrected t test
message("Bonferroni corrected t test")
pairwise.t.test(outcome, iv_fac, p.adj = "bonf", data=df)%>% print() #Bonferroni corrected
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------Non-paramteric tests------------------------------------")
message("Tukey test")
TukeyHSD(aov.out)%>% print() # Tukey HSD post hoc
message("Krushal Wallis test")
kruskal.test(outcome ~ iv_fac) %>% suppressMessages() %>% print()
message("Wilcox test")
pairwise.wilcox.test(x = outcome, g = iv_fac, p.adj = "bonf") %>% suppressMessages() %>% print()
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------post hoc tests------------------------------------")
message("Krushal Dunn")
posthoc.kruskal.dunn.test(outcome, iv_fac, p.adj = "bonf") %>% suppressMessages() %>% print()
message("Krushal nemenyi")
posthoc.kruskal.nemenyi.test(outcome, iv_fac, p.adj = "bonf") %>% suppressMessages() %>% print()
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------pairwise tests------------------------------------")
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
message("paired t test")
pairwise.t.test(outcome, iv_fac, p.adj = "none", data=df) %>% print() #non-corrected t test
message("Bonferroni corrected t test")
pairwise.t.test(outcome, iv_fac, p.adj = "bonf", data=df)%>% print() #Bonferroni corrected
#removes all previous data in the workspace
rm(list = ls())
pacman::p_load(tidyverse, lsr, broom, PMCMR)
datafilename <- "data/post_survey.csv"	# csv file name
dv <- quo(comfortable_info)			# dependent variable
iv <- quo(mode)		# independent variable
norm_test_threhold <- 0.05
df <- suppressMessages(read_csv(datafilename))    #read the data into a data frame using the header row
df <-
df %>%
filter(!is.na(!!dv), !!dv != 0)
# iv = getColumnByName(df, independentVariable1)	 #create handles to the data rows we care about
iv_fac <- df %>% pull(!!iv) %>% factor()
outcome <- df %>% pull(!!dv)
#check normality
cat("\n")
message("--------------------------------------------------------------------------------------")
message("----------------------------------Test for Normality----------------------------------")
par(mfrow=c(1,2))
qqnorm(outcome)			#normal QQ plot (should be straight diagonal for normal)
hist(outcome,breaks=length(outcome))	#histogram
sh <- shapiro.test(outcome) %>% print()
ks.test(outcome, "pnorm", mean=mean(outcome), sd=sd(outcome)) %>% print()
if(sh$p.value < norm_test_threhold){
message("Normality satisfied according to Shapiro-Wilk")
} else {
message("Normality NOT satisfied according to Shapiro-Wilk")
}
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------Means and SDs------------------------------------")
# mean overall
cat("\n")
message("mean overall")
mean(outcome, na.rm = FALSE) %>% print()
# calculate means for condition cells (combinations of conditions)
cat("\n")
message("means of outcome by levels of independent variable")
tapply(outcome, iv_fac, mean)  %>% print()
# standard deviation overall
cat("\n")
message("SD overall")
sd(outcome, na.rm = FALSE) %>% print()
# calculate SD for condition cells (combinations of conditions)
cat("\n")
message("SDs of outcome by levels of independent variable")
tapply(outcome, iv_fac, sd)  %>% print()
# ANOVA. note: missing values omitted by default for ANOVA
cat("\n")
message("--------------------------------------------------------------------------------------")
message("-----------------------------------------ANOVA----------------------------------------")
aov.out <- aov(outcome ~ iv_fac, data=df)    #do the analysis of variance
tidy(aov.out) %>% print()
if(tidy(aov.out)$p.value[1] < 0.05){
cat("\n")
message("-----------Effect detected by ANOVA-----------")
} else{
cat("\n")
message("-----------No evidence for effect detected by ANOVA-----------")
}
pacman::p_load(tidyverse, RColorBrewer)
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75))
}
draw_boxplot <- function(df, var_x, var_y, title,
fill = "darkslategray3", lwd = 0.85, fatten = 1, outlier.size = 2, alpha = 0.9,
label_wrap = 17,
size_x = 20, size_y = 17, size_title = 18){
# browser()
var_x <- enquo(var_x)
var_y <- enquo(var_y)
df %>%
ggplot() +
geom_boxplot(aes_string(x = quo_name(var_x), y = quo_name(var_y)),
lwd = lwd, fatten = fatten, outlier.size = outlier.size, fill = fill, alpha = alpha) +
scale_x_discrete(labels = function(x) str_wrap(x, width = label_wrap)) +
labs(title = title) +
theme_pub(size_x, size_y, size_title) +
guides(fill=FALSE)
}
draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------pairwise tests------------------------------------")
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
message("paired t test")
pairwise.t.test(outcome, iv_fac, p.adj = "none", data=df) %>% print() #non-corrected t test
message("Bonferroni corrected t test")
pairwise.t.test(outcome, iv_fac, p.adj = "bonf", data=df)%>% print() #Bonferroni corrected
draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
sink("results/comfortable_info_essential.txt")
source("results/v2_comfinfo.R")
sink()
#removes all previous data in the workspace
rm(list = ls())
pacman::p_load(tidyverse, lsr, broom, PMCMR)
datafilename <- "data/post_survey.csv"	# csv file name
#removes all previous data in the workspace
rm(list = ls())
pacman::p_load(tidyverse, lsr, broom, PMCMR)
datafilename <- "data/post_survey.csv"	# csv file name
dv <- quo(comfortable_info)			# dependent variable
iv <- quo(mode)		# independent variable
norm_test_threhold <- 0.05
df <- suppressMessages(read_csv(datafilename))    #read the data into a data frame using the header row
df <-
df %>%
filter(!is.na(!!dv), !!dv != 0)
# iv = getColumnByName(df, independentVariable1)	 #create handles to the data rows we care about
iv_fac <- df %>% pull(!!iv) %>% factor()
outcome <- df %>% pull(!!dv)
#check normality
cat("\n")
message("--------------------------------------------------------------------------------------")
message("----------------------------------Test for Normality----------------------------------")
par(mfrow=c(1,2))
qqnorm(outcome)			#normal QQ plot (should be straight diagonal for normal)
hist(outcome,breaks=length(outcome))	#histogram
sh <- shapiro.test(outcome) %>% print()
ks.test(outcome, "pnorm", mean=mean(outcome), sd=sd(outcome)) %>% print()
if(sh$p.value < norm_test_threhold){
message("Normality satisfied according to Shapiro-Wilk")
} else {
message("Normality NOT satisfied according to Shapiro-Wilk")
}
source("results/v2_comfinfo.R")
source("results/v2_comfipii.R.R")
source("results/v2_comfipii.R")
draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
ggsave("plots/comfortable_pii.png", dpi = 500, height = 300)
ggsave("plots/comfortable_pii.png", dpi = 500, height = 10)
#removes all previous data in the workspace
rm(list = ls())
pacman::p_load(tidyverse, lsr, broom, PMCMR)
datafilename <- "data/post_survey.csv"	# csv file name
dv <- quo(comfortable_pii)			# dependent variable
iv <- quo(mode)		# independent variable
norm_test_threhold <- 0.05
df <- suppressMessages(read_csv(datafilename))    #read the data into a data frame using the header row
df <-
df %>%
filter(!is.na(!!dv), !!dv != 0)
df
df %>% filter(comfortable_pii == 0)
# iv = getColumnByName(df, independentVariable1)	 #create handles to the data rows we care about
iv_fac <- df %>% pull(!!iv) %>% factor()
outcome <- df %>% pull(!!dv)
#check normality
cat("\n")
message("--------------------------------------------------------------------------------------")
message("----------------------------------Test for Normality----------------------------------")
par(mfrow=c(1,2))
qqnorm(outcome)			#normal QQ plot (should be straight diagonal for normal)
hist(outcome,breaks=length(outcome))	#histogram
sh <- shapiro.test(outcome) %>% print()
ks.test(outcome, "pnorm", mean=mean(outcome), sd=sd(outcome)) %>% print()
if(sh$p.value < norm_test_threhold){
message("Normality satisfied according to Shapiro-Wilk")
} else {
message("Normality NOT satisfied according to Shapiro-Wilk")
}
cat("\n")
message("--------------------------------------------------------------------------------------")
message("------------------------------------Means and SDs------------------------------------")
# mean overall
cat("\n")
message("mean overall")
mean(outcome, na.rm = FALSE) %>% print()
# calculate means for condition cells (combinations of conditions)
cat("\n")
message("means of outcome by levels of independent variable")
tapply(outcome, iv_fac, mean)  %>% print()
# standard deviation overall
cat("\n")
message("SD overall")
sd(outcome, na.rm = FALSE) %>% print()
# calculate SD for condition cells (combinations of conditions)
cat("\n")
message("SDs of outcome by levels of independent variable")
tapply(outcome, iv_fac, sd)  %>% print()
# ANOVA. note: missing values omitted by default for ANOVA
cat("\n")
message("--------------------------------------------------------------------------------------")
message("-----------------------------------------ANOVA----------------------------------------")
aov.out <- aov(outcome ~ iv_fac, data=df)    #do the analysis of variance
tidy(aov.out) %>% print()
if(tidy(aov.out)$p.value[1] < 0.05){
cat("\n")
message("-----------Effect detected by ANOVA-----------")
} else{
cat("\n")
message("-----------No evidence for effect detected by ANOVA-----------")
}
pacman::p_load(tidyverse, RColorBrewer)
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75))
}
draw_boxplot <- function(df, var_x, var_y, title,
fill = "darkslategray3", lwd = 0.85, fatten = 1, outlier.size = 2, alpha = 0.9,
label_wrap = 17,
size_x = 20, size_y = 17, size_title = 18){
# browser()
var_x <- enquo(var_x)
var_y <- enquo(var_y)
df %>%
ggplot() +
geom_boxplot(aes_string(x = quo_name(var_x), y = quo_name(var_y)),
lwd = lwd, fatten = fatten, outlier.size = outlier.size, fill = fill, alpha = alpha) +
scale_x_discrete(labels = function(x) str_wrap(x, width = label_wrap)) +
labs(title = title) +
theme_pub(size_x, size_y, size_title) +
guides(fill=FALSE)
}
draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
ggsave("plots/comfortable_pii.png", dpi = 500, height = 10)
source('~/projects/userstudy_analysis_template/results/v2_comfinfo.R', echo=TRUE)
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
df %>%
mutate(mode_mod = if_else(mode %in% c(1,2,5), 1, 2) %>% as.factor()) %>%
pull(mutate_mod)
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
df %>%
mutate(mode_mod = if_else(mode %in% c(1,2,5), 1, 2) %>% as.factor()) %>%
pull(mutate_mod)
df %>%
mutate(mode_mod = if_else(mode %in% c(1,2,5), 1, 2) %>% as.factor())
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
df %>%
mutate(mode_mod = if_else(mode %in% c(1,2,5), 1, 2) %>% as.factor()) %>%
pull(mode_mod)
# Bonferroni has more power for smaller number of comparisons. Tukey better for larger number of groups
mode_mod <-
df %>%
mutate(mode_mod = if_else(mode %in% c(1,2,5), 1, 2) %>% as.factor()) %>%
pull(mode_mod)
pairwise.t.test(outcome, mode_mod, p.adj = "none", data=df) %>% print() #non-corrected t test
?t.test
t.test(outcome, mode_mod)
t.test(outcome[mode_mod == 1], outcome[mode_mod == 2])
pairwise.t.test(outcome, mode_mod, p.adj = "none", data=df) %>% print() #non-corrected t test
source('~/projects/userstudy_analysis_template/results/v2_comfipii.R', echo=TRUE)
df
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75, linetype = "2925"))
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75, linetype = "2925"))
}
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
pacman::p_load(tidyverse, lsr, broom, PMCMR, RColorBrewer)
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75, linetype = "28"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75, linetype = "28"))
}
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75))
theme_pub <- function(size_txt_x = 15, size_txt_y = 14, size_txt_title = 14){
theme_minimal() +
theme(axis.text.x=element_text(size = size_txt_x),
axis.text.y=element_text(size = size_txt_y),
title=element_text(size = size_txt_title),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", size = 0.75))
}
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "")
df$comfortable_pii %>% median()
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(df %>% group_by(mode) %>% summarise_all(median), aes(mode, comfortable_pii, text = "median"))
df_meds<- df %>% group_by(mode) %>% summarise_all(median)
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(df_meds, aes(mode, comfortable_pii, text = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(df_meds, aes(mode, comfortable_pii, text = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(mode, comfortable_pii, text = "median"))
df_meds <- df %>% group_by(mode) %>% summarise_all(median)
df_meds <- df %>% group_by(mode) %>% summarise_if(is.numeric, median)
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(mode, comfortable_pii, text = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(mode, comfortable_pii, label = "median"))
df_meds
df_meds <- df %>% group_by(mode) %>% summarise(comfortable_pii = median(comfortable_pii))
df_meds
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(mode, comfortable_pii, label = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(as.factor(mode), comfortable_pii, label = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(as.factor(mode), comfortable_pii + 0.2, label = "median"))
draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(as.factor(mode), comfortable_pii - 0.2, label = "median"))
x <- draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(as.factor(mode), comfortable_pii - 0.2, label = "median"))
p <- draw_boxplot(df, as.factor(mode), comfortable_pii, title = "") +
geom_text(data = df_meds, aes(as.factor(mode), comfortable_pii - 0.2, label = "median"))
dat <- ggplot_build(p)$data[[1]]
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="red", size=2)
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="red", size=2, lty = "28")
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="red", size=2, lty = "2")
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="red", size=2, lty = "longdash")
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="darkgreen", size=2, lty = "longdash")
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="green", size=2, lty = "longdash")
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="darkblue", size=2, lty = "longdash")
source('~/projects/userstudy_analysis_template/results/v2_comfinfo.R', echo=TRUE)
p <- draw_boxplot(df, as.factor(mode), comfortable_info, title = "")
dat <- ggplot_build(p)$data[[1]]
p + geom_segment(data=dat, aes(x=xmin, xend=xmax,
y=middle, yend=middle), colour="darkblue", size=2, lty = "longdash")
